<?phpclass UserModel extends Model {	protected	$tableName	=	'user';	public static $nameHash = array();    var $uid;	/**	 * 根据查询条件查询用户	 *	 * @param array|string $map          查询条件	 * @param string       $field		   字段	 * @param int 		   $limit		   限制条数	 * @param string 	   $order		   结果排序	 * @param boolean 	   $is_find_page 是否分页	 * @return array	 */	public function getUserByMap($map = array(), $field = '*', $limit = '', $order = '', $is_find_page = true) {		if ($is_find_page) {			return $this->where($map)->field($field)->order($order)->findPage($limit);		}else {			return $this->where($map)->field($field)->order($order)->limit($limit)->findAll();		}	}	/**	 * 获取用户列表	 *	 * @param array|string $map             查询条件	 * @param boolean	   $show_dept		是否显示部门信息	 * @param boolean 	   $show_user_group 是否显示用户组	 * @param string       $field		           字段	 * @param string 	   $order		           结果排序	 * @param int 		   $limit		 	限制条数	 * @return array	 */    public function getUserList($map = '', $show_dept = false, $show_user_group = false, $field = '*', $order = 'uid DESC', $limit = 30,$show_cx=false) {        $this->where($map)->field($field)->order($order);        if (isset($map['sid'])) {            $res = $this->force('sid')->findPage($limit);        } else {            $res = $this->findPage($limit);        }        $uids = getSubByKey($res['data'], 'uid');        if($field=='*'||  strpos($field, 'school_event_score')){            foreach ($res['data'] as $k => $v) {                $res['data'][$k]['school_event_score'] = X('Score')->getUserScore($v['uid']);            }        }        //诚信度        if ($show_cx) {            $cxMap = array('uid'=>array('in', $uids));            $cxs = M('event_cx')->where($cxMap)->field('uid,total,attend')->findAll();            $cxArr = array();            foreach ($cxs as $v) {                $grad = ceil($v['attend']*100/$v['total']);                $cxArr[$v['uid']] = $grad;            }            unset($cxs);            foreach ($res['data'] as $k => $v) {                $res['data'][$k]['cx'] = isset($cxArr[$v['uid']]) ? $cxArr[$v['uid']].'%' : '暂无';            }        }        //部门信息        if ($show_dept) {            foreach ($res['data'] as $k => $v) {                $res['data'][$k]['school'] = tsGetSchoolNameById($v['sid']);            }        }        //用户组        if ($show_user_group) {            $temp_user_group = model('UserGroup')->getUserGroupByUid($uids);            //转换成array($uid => $user_group)的格式            $user_group = array();            foreach ($temp_user_group as $v) {                $user_group[$v['uid']][] = $v;            }            unset($temp_user_group);            //将用户组信息添加至结果集            foreach ($res['data'] as $k => $v) {                $res['data'][$k]['user_group'] = isset($user_group[$v['uid']]) ? $user_group[$v['uid']] : array();            }        }        return $res;    }    /**     * 删除用户     *     * @param array|string $uids     * @return boolean     */    public function deleteUser($uids) {		set_time_limit(0);    	//防止误删    	$uids = is_array($uids) ? $uids : explode(',', $uids);    	foreach($uids as $k => $v) {    		if (!is_numeric($v) || $v == $GLOBALS['ts']['user']['uid']) {    			unset($uids[$k]);    		}    	}    	if ( empty($uids) ) return false;    	$map['uid'] = array('in', $uids);    	$map['admin_level'] = 0;    	//user    	$res = M('user')->where($map)->delete();    	unset($map['admin_level']);		$res = true;		if ($res) {			//删除用户资料相关信息			service('Comment')->where($map)->delete();			M('credit_user')->where($map)->delete();//			M('feed')->where($map)->delete();			M('invitecode')->where($map)->delete();			M('login')->where($map)->delete();			model('Message')->where(array('from_uid'=>array('IN',$uids),'to_uid'=>array('IN',$uids)))->delete();			M('notify')->where(array('from'=>array('IN',$uids),'receive'=>array('IN',$uids)))->delete();//			M('ucenter_user_link')->where($map)->delete();			M('user_app')->where($map)->delete();//			M('user_blacklist')->where($map)->delete();			M('user_count')->where($map)->delete();//			M('user_department')->where($map)->delete();			M('user_group_link')->where($map)->delete();			M('user_medal')->where($map)->delete();			M('user_online')->where($map)->delete();			M('user_privacy')->where($map)->delete();			M('user_profile')->where($map)->delete();			M('user_tag')->where($map)->delete();			M('user_verified')->where($map)->delete();			M('user_visited')->where($map)->delete();			//删除用户应用信息//			M('admin_log')->where($map)->delete();//			M('blog')->where($map)->delete();//			M('blog_category')->where($map)->delete();//			M('blog_mention')->where($map)->delete();//			M('blog_outline')->where($map)->delete();//			M('blog_subscribe')->where($map)->delete();//			M('denounce')->where($map)->delete();			//M('event')->where($map)->delete();//			M('event_photo')->where($map)->delete();//			M('event_user')->where($map)->delete();//			M('friend')->where(array('uid'=>array('IN',$uids),'friend_uid'=>array('IN',$uids)))->delete();//			M('gift_user')->where(array('fromUserId'=>array('IN',$uids),'toUserId'=>array('IN',$uids)))->delete();//			M('group_member')->where($map)->delete();//			M('group_photo')->where(array('userId'=>array('IN',$uids)))->delete();//			M('group_post')->where($map)->delete();//			M('group_topic')->where($map)->delete();//			M('group_user_count')->where($map)->delete();////			M('group_weibo')->where($map)->delete();//			M('group_weibo_atme')->where($map)->delete();//			M('group_weibo_comment')->where($map)->delete();			M('photo')->where(array('userId'=>array('IN',$uids)))->delete();			M('photo_album')->where(array('userId'=>array('IN',$uids)))->delete();			M('photo_index')->where(array('userId'=>array('IN',$uids)))->delete();			M('space')->where($map)->delete();//			M('vote')->where($map)->delete();//			M('vote_user')->where($map)->delete();			D('Weibo', 'weibo')->where($map)->delete();			D('Atme', 'weibo')->where($map)->delete();			D('Comment', 'weibo')->where($map)->delete();			D('Favorite', 'weibo')->where($map)->delete();			D('Follow', 'weibo')->where(array('uid'=>array('IN',$uids),'fid'=>array('IN',$uids),'_logic'=>'OR'))->delete();			D('FollowGroup', 'weibo')->where($map)->delete();			M('follow_group_link')->where($map)->delete();                        Model('UserA')->deleteUserA($uids);//			D('Star', 'weibo')->where($map)->delete();			//删除用户附件//			$all_attach	=	M('Attach')->where(array('userId'=>array('IN',$uids)))->findAll();//			foreach($all_attach as $v){//				unlink(UPLOAD_PATH.'/'.$v['savepath'].$v['savename']);//			}////			$result = M('attach')->where(array('userId'=>array('IN',$uids)))->delete();//			if($result){//				//echo 'delete succesful!';//			}		}    	return $res;    }    /**     * 更新操作     *     * @param string $type 操作     * @return boolean     */	function upDate($type){	    return $this->$type();	}	/**	 * 更新基本信息	 *	 * @return array	 */	private function upbase( ){                $res['boolen']  = 0;		$nickname = t($_POST['nickname']);		if(!$nickname){			$res['message'] = L('nickname_nonull');			return $res;		}//                $sidArr = explode(',', $_POST['sids']);//                $cnt = count($sidArr);//                //没选择院校//                if($cnt == 0){//                    $res['message'] = '请选择院校';//                    return $res;//                }//                $user_info = D('User', 'home')->getUserByIdentifier($this->uid, 'uid');//                if($user_info['sid']){//                    if($cnt != 1){//                        $res['message'] = '请选择院校';//                        return $res;//                    }//                    $data['sid1'] = $sidArr[0];//                }else{//                    if($cnt != 2){//                        $res['message'] = '院校信息不够详细';//                        return $res;//                    }//                    $data['sid'] = $sidArr[0];//                    $data['sid1'] = $sidArr[1];//                }//		$year = t($_POST['year']);//		if(!$year){//			$res['message'] = '请填写年级';//			return $res;//		}//		$major = t($_POST['major']);//		if(!$major){//			$res['message'] = '请填写专业';//			return $res;//		}//            $data['year'] = $year;//            $data['major'] = $major;//	    $data['realname'] = t($_POST['realname']);		if( !isLegalUsername($nickname) ){			$res['message'] = L('nickname_format_error');			return $res;		}		if( checkKeyWord($nickname) ){			$res['message'] = '昵称含有敏感词';			return $res;		}		if( M('user')->where("uname='{$nickname}' AND uid!={$this->uid}")->find() ){			$res['message'] = L('nickname_used');			return $res;		}	    $data['uname']    = $nickname;	    $data['sex']      = intval( $_POST['sex'] );	    M('user')->where("uid={$this->uid}")->data($data)->save();	    //修改登录用户缓存信息--名称	    $userLoginInfo = S('S_userInfo_'.$this->uid);	    if(!empty($userLoginInfo)) {	    	$userLoginInfo['uname'] = $data['uname'];	    	S('S_userInfo_'.$this->uid, $userLoginInfo);	    }	    $_SESSION['userInfo'] = D('User', 'home')->find($this->uid);            $res['message'] = L('update_done');            $res['boolen']  = 1;            return $res;	}	/**	 * 获取用户基本信息字段	 *	 * @param string $module 字段类别,contact联系的字段、inro基本介绍的字段	 * @return array	 */	protected function data_field($module = '',$space=false){       if($space){	        $list = $this->table(C('DB_PREFIX').'user_set')->where("status=1 and showspace=1")->findAll();	    }else{	        $list = $this->table(C('DB_PREFIX').'user_set')->where("status=1")->findAll();	    }        foreach ($list as $value){            $data[$value['module']][$value['fieldkey']] = $value['fieldname'];        }	    return ($module)?$data[$module]:$data;	}	/**	 * 根据标示符(uid或uname或email或domain)获取用户信息	 *	 * 首先检查缓存(缓存ID: user_用户uid / user_用户uname), 然后查询数据库(并设置缓存).	 *	 * @param string|int $identifier      标示符内容	 * @param string     $identifier_type 标示符类型. (uid, uname, email, domain之一)	 */	public function getUserByIdentifier($identifier, $identifier_type = 'uid')	{		if ($identifier_type == 'uid' && !is_numeric($identifier))			return false;		else if (!in_array($identifier_type, array('uid','uname','email','domain')))			return false;		$user = $this->getUserInfoCache($identifier, $identifier_type);		return $user;	}	/**     * 缓存用户列表     *     * 缓存key的格式为: user_用户uid 和 user_用户昵称     *     * @param array $user_list 用户ID列表, 或者用户详情列表. 如果为用户ID列表时, 本方法会首先获取用户详情列表, 然后缓存.     * @return boolean true:缓存成功 false:缓存失败     */	public function setUserObjectCache($user_list)	{		if (!is_array($user_list))			return false;		if (!is_array($user_list[0]) && !is_numeric($user_list[0]))			return false;		if (is_numeric($user_list[0])) {			foreach($user_list as $val) {				$user = $this->getUserInfoCache($val);			}		} else {			foreach($user_list as $val) {				$this->getUserInfoCache($val['uid']);			}		}		return true;	}    public function isEmailAvailable($email,$uid)    {        if (!isValidEmail($email)) // Email格式错误            return false;        else if (($res = $this->getUserByIdentifier($email, 'email'))) { // 在TS已存在            if($uid){                if($res['uid'] != intval($uid)) return false;            }else{                return false;            }        } else if (UC_SYNC && uc_user_checkemail($email) < 0) // 在UCenter已存在或非法            return false;        return true;    }    public function isUnameAvailable($uname)    {        if (!isValidUname($uname)) // 格式错误            return false;        else if ($this->getUserByIdentifier($uname, 'uname')) // 在TS已存在            return false;        else if (UC_SYNC && uc_user_checkname($uname) < 0) // 在UCenter已存在或非法            return false;        return true;    }	/**	 * 获取用户基本信息缓存	 *	 * @param int $uid 用户UID，string $type 查询类型(uid,uname,email,domain)	 * @return array 用户基本信息	 */	public function getUserInfoCache($uid, $type = 'uid') {		//如果为空，则直接退出		$defaultValue = $uid;		if(empty($uid)) {			return false;		}		if(!in_array($type, array('uid','uname','email','domain'))) {			return false;		}		//获取用户的UID		if(!is_numeric($uid) && $type != 'uid') {			if(isset(self::$nameHash[$type][$defaultValue])){				$uid = self::$nameHash[$type][$defaultValue];			} else {				$map[$type] = $uid;				$uid = $this->where($map)->getField('uid');				self::$nameHash[$type][$defaultValue] = $uid;			}			if(empty($uid)) {				return false;			}		}		$userInfo = S('S_userInfo_'.$uid);		//获取用户基本信息缓存		if(empty($userInfo)||!isset($userInfo['uid'])) {			//姓名			$userInfo = $this->where('uid='.$uid)->find();			//积分与经验			$userCredit = X('Credit')->getUserCredit($uid);			$userInfo['credit'] = $userCredit;			$userInfo['school_event_score'] = X('Score')->getUserScore($uid);			//关注数                        $userCount = Model('UserCount')->getUserCount($uid);			//$count['following'] = M('weibo_follow')->where("uid={$uid} AND type=0")->count();			$userInfo['following'] = $userCount['following'];			//粉丝数			//$count['follower']  = M('weibo_follow')->where("fid={$uid} AND type=0")->count();			$userInfo['follower'] = $userCount['follower'];			//微博数			//$count['miniNum'] = M('weibo')->where("uid={$uid} AND isdel=0")->count();			$userInfo['miniNum'] = $userCount['weibo'];			//学校			if(!empty($userInfo['sid']))			{				$userInfo['school'] = tsGetSchoolTitle($userInfo['sid']);				$school = M('school')->where(array('id'=>$userInfo['sid']))->find();			}			if(!empty($school) && $school['eTime'] && $school['domain']){				$userInfo['schoolEvent'] = $school;			}			$userInfo['money'] = Model('Money')->getMoneyDb($uid);			//诚信度			$userInfo['cx'] = Model('Cx')->getCxDb($uid);			$userInfo['sign'] = !empty($userInfo['sign']) ? keyWordFilter($userInfo['sign']) : '';			S('S_userInfo_'.$uid, $userInfo);		}		return $userInfo;	}    //增加学分    public function incCredit($uid,$sid,$credit){        if($credit<=0){            return true;        }        $res = $this->setInc('school_event_credit', "uid=" . $uid, $credit);        if($res){            $this->upEday($uid, $sid, $credit);            $userLoginInfo = S('S_userInfo_'.$uid);            if(!empty($userLoginInfo)) {                $userLoginInfo['school_event_credit'] = $userLoginInfo['school_event_credit']+$credit;                S('S_userInfo_'.$uid, $userLoginInfo);                if($_SESSION['userInfo']['uid'] == $uid){                    $_SESSION['userInfo'] = $userLoginInfo;                }            }            return true;        }        return false;    }	/**	 * 扣除学分	 * @param $uid		用户ID	 * @param $sid		学校ID	 * @param $credit	学分	 * @return bool	 */	public function decCredit($uid,$sid,$credit){		if($credit<=0){			return true;		}		$res = $this->setDec('school_event_credit', "uid=" . $uid, $credit);		//M('Test')->add(array('msg'=>$this->getLastSql()));		if($res){			$this->decEDay($uid, $sid, $credit);			$userLoginInfo = S('S_userInfo_'.$uid);			if(!empty($userLoginInfo)) {				//扣除学分				$userLoginInfo['school_event_credit'] = $userLoginInfo['school_event_credit']-$credit;				S('S_userInfo_'.$uid, $userLoginInfo);				if($_SESSION['userInfo']['uid'] == $uid){					$_SESSION['userInfo'] = $userLoginInfo;				}			}			return true;		}		return false;	}    public function upEday($uid,$sid,$credit){        $today = date('Y-m-d');        $map['uid'] = $uid;        $map['day'] = $today;        $res = M('tj_eday')->field('id,credit')->where($map)->find();        $data['uid'] = $uid;        $data['sid'] = $sid;        $data['credit'] = $credit;        $data['day'] = $today;        if($res){            $data['credit'] = array('exp','credit+'.$credit);            return M('tj_eday')->where('id='.$res['id'])->save($data);        }else{            return M('tj_eday')->add($data);        }    }	/**	 * 扣除学分	 * 		找到当前用户，学分大于当前学分的，取最后一条记录作为扣分统计	 *	 * @param $uid		用户ID	 * @param $sid		学校ID	 * @param $credit	学分	 * @return bool	 */	public function decEDay($uid,$sid,$credit){		$map['uid'] 	= $uid;		$map['sid']		= $sid;		$map['credit']	= array('egt',$credit);		$rs = M('tj_eday')->field('id')->where($map)->order('`day` desc')->find();		if (!$rs){			return false;		}else{			//扣除最后一条满足条件的学分			$rs = M('tj_eday')->setDec('credit','id='.$rs['id'],$credit);			//M('Test')->add(array('msg'=>M('tj_eday')->getLastSql()));			return $rs;		}	}    //更新用户信息    public function upField($uid,$k,$v){        $res = $this->setField($k,$v,'uid='.$uid);        if($res){            $userLoginInfo = S('S_userInfo_'.$uid);            if(!empty($userLoginInfo)) {                $userLoginInfo[$k] = keyWordFilter($v);                S('S_userInfo_'.$uid, $userLoginInfo);                if($_SESSION['userInfo']['uid'] == $uid){                    $_SESSION['userInfo'] = $userLoginInfo;                }            }            return true;        }        $this->error = '操作失败，请稍后再试！';        return false;    }    //验证用户信息5.5.2之前    public function doUserMessOld($sid,$email,$email2='',$mobile){        $mark = D('school')->where('id='.$sid)->field('id,email')->find();        if(!$mark['email']){            $this->error = '学校尚未开通';            return false;        }        $data['email'] = $email.$mark['email'];        $data['sid'] = $sid;        $result = $this->where($data)->field('uid,password,email2,mobile')->find();        if(!$result){            $this->error = '没有此用户信息！';            return false;        }        if($result['email2']!=$email2 || $result['mobile']!=$mobile){            $this->error = '密保信息填写错误';            return false;        }        if(!canChangePass($result["uid"])){            $this->error = "该账号不可重置密码";            return false;        }        $code = base64_encode($result["uid"] . "." . md5($result["uid"] . '+' . $result["password"]));        return $code;    }	//验证用户信息5.5.2版本之后	public function doUserMess($sid,$email,$mobile){		$mark = D('school')->where('id='.$sid)->field('id,email')->find();		if(!$mark['email']){			$this->error = '学校尚未开通';			return false;		}		$data['email'] = $email.$mark['email'];		$data['mobile'] = $mobile;		$data['sid'] = $sid;		$result = $this->where($data)->field('uid,password,mobile')->find();		if(!$result){			$this->error = '没有此用户信息！';			return false;		}		if($result['mobile']!=$mobile){			$this->error = '密保信息填写错误';			return false;		}		if(!canChangePass($result["uid"])){			$this->error = "该账号不可重置密码";			return false;		}		$code = base64_encode($result["uid"] . "." . md5($result["uid"] . '+' . $result["password"]));		return $code;	}    //重置密码    public function apiResetPass($password,$code){        $data = explode('.', base64_decode($code));        if(!canChangePass($data[0])){            $this->error("该账号不可修改密码");            return false;        }        $user = $this->where('uid=' . $data[0])->find();        if ($data[1] == md5($data[0] . '+' . $user["password"])){            $map['password'] = codePass($password);            if($map['password'] == $user["password"]){                $res = true;            }else{                $res = $this->where('uid='.$data[0])->save($map);            }            if($res){                S('S_userInfo_' . $data[0], null);            }        }else{            $this->error('无法修改密码！');            return false;        }        return $res;    }}