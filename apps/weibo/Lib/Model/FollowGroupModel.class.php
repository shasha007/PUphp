<?phpclass FollowGroupModel extends Model{	var $tableName = 'weibo_follow_group';    const CACHE_PREFIX = "weibo_follow";	// 获取指定用户所有的关注的分组	public function getGroupList($uid){        if(!is_numeric($uid)) throw new ThinkException(L("arg_number_only"));		if(false == ($follow_group_list = F(self::CACHE_PREFIX."list_".$uid)) ){		    $follow_group_list = $this->where("uid={$uid}")->order('ctime ASC')->findAll();		    if(empty($follow_group_list)){		    	F(self::CACHE_PREFIX."list_".$uid,array());		    }else{		    	F(self::CACHE_PREFIX."list_".$uid,$follow_group_list);		    }		}		return $follow_group_list;	}	// 获取指定用户指定关注的人所在分组	public function getGroupStatus($uid,$fid){		$map = array(                            'uid' => intval($uid),                            'fid' => intval($fid),                            'type'=> 0			   );		$groupId = M('weibo_follow')->getField('group_id',$map);		if($groupId){                    $follow_group_status = $this->field('follow_group_id AS gid,title')->where("follow_group_id={$groupId}")->findAll();                    if(empty($follow_group_status))$follow_group_status[0] = array('gid'=>0,'title'=> L('no_grouping'));                    return $follow_group_status;		}else{                    $follow_group_status[0] = array('gid'=>0,'title'=> L('no_grouping'));                    return $follow_group_status;		}	}	// 设置好友的分组状态	public function setGroupStatus($uid,$fid,$gid,$action=NULL){	    F(self::CACHE_PREFIX."list_".$uid,null);	    F(self::CACHE_PREFIX."usergroup_{$uid}_{$gid}",null);            $dao = M('weibo_follow');            $map = array('uid' => intval($uid),                        'fid' => intval($fid),                        'type'=> 0);            if($gid==0){                $dao->where($map)->save(array('group_id'=>0));                return true;            }            $groupUid = M('weibo_follow_group')->getField('uid','follow_group_id='.$gid);            if($groupUid && $groupUid == $uid){                if($action == NULL){                    $dao->where($map)->save(array('group_id'=>0)) || $dao->where($map)->save(array('group_id'=>$gid));                }elseif($action == 'add'){                    $dao->where($map)->save(array('group_id'=>$gid));                }elseif($action == 'delete'){                    $dao->where($map)->save(array('group_id'=>0));                }            }	}	// 添加/修改分组	public function setGroup($uid,$title,$gid=NULL){	    F(self::CACHE_PREFIX."list_".$uid,null);	    F(self::CACHE_PREFIX."usergroup_{$uid}_{$gid}",null);		$uid   = intval($uid);		$title = h(mStr($title,8,'utf-8',false));		if(!$title)return 0;		//查看分组是否已存在		$map = array(					'uid'   => $uid,					'title' => $title			   );		$_gid = $this->getField('follow_group_id',$map);		if(!$_gid){			if($gid == NULL){				$data = array(							'uid'   => $uid,							'title' => $title,							'ctime' => time()						);				$gid = $this->add($data);				return $gid;			}else{				$gid   = intval($gid);				if(!$gid)return 0;				$data = array(							'follow_group_id'   => $gid,							'uid'   => $uid,							'title' => $title					    );				$res = $this->save($data);				return 1;			}		}elseif($_gid == $gid){			return 1;		}else{			return 0;		}	}	// 删除某个分组	public function deleteGroup($uid,$gid){	    F(self::CACHE_PREFIX."list_".$uid,null);	    F(self::CACHE_PREFIX."usergroup_{$uid}_{$gid}",null);		$uid = intval($uid);		$gid = intval($gid);		$res = $this->where("uid={$uid} AND follow_group_id={$gid}")->delete();		if($res){                    // 清除相应分组信息                    M('weibo_follow')->setField('group_id',0,"group_id={$gid}");                    return 1;		}else{			return 0;		}	}	// 获取指定用户指定分组下的关注的人的ID	public function getUsersByGroup($uid,$gid){		$uid = intval($uid);		$gid = intval($gid);		if (($_fid = F(self::CACHE_PREFIX."usergroup_{$uid}_{$gid}")) == false){                    $this->where("type=0 and uid=$uid and group_id=$gid")->field('fid')->findAll();		    foreach($fid as $v){		        $_fid[] = $v['fid'];		    }		    F(self::CACHE_PREFIX."usergroup_{$uid}_{$gid}",$_fid);		}		return $_fid;	}}?>