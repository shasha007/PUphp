<?phpclass FavoriteModel extends Model{    var $tableName = 'weibo_favorite';    static $user_cache = array();    static $cacheHash = array();    public function getList($uid, $since_id, $max_id, $count = 20, $page = 1)    {    	$limit = ($page-1)*$count.','.$count;        $weiboIds = $this->where('uid='.$uid)->field('weibo_id')->findAll();        $weiboIds = getSubByKey($weiboIds, 'weibo_id');        if($weiboIds){            $str = implode(',', $weiboIds);            $map['_string'] = "weibo_id IN ($str)";        }else{            return array();        }        if ($since_id) {                $map['weibo_id'] = array('gt',$since_id);        } else if ($max_id) {                $map['weibo_id'] = array('lt',$max_id);        }    	$list = M('weibo')->where($map)->order('weibo_id desc')->limit($limit)->findAll();    	/*    	 * 缓存被转发微博的详情, 作者信息, 被转发微博的作者信息    	 */    	$ids = getSubBeKeyArray($list, 'weibo_id,transpond_id,uid');    	$transpond_list = D('Weibo', 'weibo')->setWeiboObjectCache($ids['transpond_id']);    	// 本页的用户IDs = 作者IDs + 被转发微博的作者IDs    	$ids['uid'] = array_merge($ids['uid'], getSubByKey($transpond_list, 'uid'));    	D('User', 'home')->setUserObjectCache($ids['uid']);    	$weibo_ids = getSubByKey($list, 'weibo_id');        foreach( $list as $key => $value) {        	$value['favorited'] = D('Favorite','weibo')->isFavorited($value['weibo_id'], $uid, $weibo_ids);        	$value['favorited'] = D('Favorite','weibo')->isFavorited($value['weibo_id'], $uid, $weibo_ids); 			$list[$key] = D('Weibo','weibo')->getOneApi('', $value);        }        return $list;    }    //收藏微博    function favWeibo( $id ,$uid ){    	$data['uid']    = $uid;    	$data['weibo_id']  = $id;    	$res = $this->add($data);    	if($res){    	    $this->_addFavoriteCache($uid, $id);    	}    	return $res;    }    //取消收藏    function dodelete($id,$uid){    	$res = $this->where("weibo_id=$id AND uid=$uid")->delete();		if($res){    	    $this->_delFavoriteCache($uid, $id);    	}		return $res;	}/** * 清空我收藏的微博 */	function delallweibo($uid){		$res=$this->where("uid=$uid")->delete();		empty($res)?$data['status'] = 0:$data['status'] = 1;		return $data;	}    /**     * 检查给定用户是否收藏给定微博     *     * @param int 		 $weibo_id 		 微博ID     * @param int 		 $uid      		 用户ID     * @param array|null $weibo_id_array $weibo_id所属的微博集合(不为空时会一次性查询, 以减少数据库请求数)     * @param string     $key            为防止前一次调用对后一次调用的干扰, 为每个$weibo_id_array赋予唯一key     * @return int 已收藏返回1, 否则返回0     */    function isFavorited($weibo_id, $uid,$static = false)    {        if(!$uid){            return false;        }        if($static){            self::$user_cache = $this->_getFavoriteCache($uid);            $list = self::$user_cache;        }else{            $list = $this->_getFavoriteCache($uid);        }        return in_array($weibo_id,$list);    }    private function _getListData($uid){    	if(isset(self::$cacheHash[$uid])){    		return self::$cacheHash[$uid]['data'];    	}       	self::$cacheHash[$uid]['data'] = $this->field('weibo_id')->where("uid=$uid")->findAll();        return self::$cacheHash[$uid]['data'];    }    private function _getFavoriteCache($uid){        if(S('favorite_' . $uid)==false){            $list = $this->_setFavoriteCache($uid);        }        return json_decode(S('favorite_'.$uid));    }    private function _addFavoriteCache($uid,$weibo_id){        $cache = $this->_getFavoriteCache($uid);        if(false == $cache){            return $this->_setFavoriteCache($uid);        }else{            !in_array($weibo_id,$cache) && $cache[] = $weibo_id;        }        return S('favorite_'.$uid,json_encode($cache));    }    private function _setFavoriteCache($uid){        $list = getSubByKey($this->_getListData($uid),'weibo_id');        S('favorite_'.$uid,json_encode($list));        return $list;    }    private function _delFavoriteCache($uid, $weibo_id) {        $cache = $this->_getFavoriteCache($uid);        if ($cache && in_array($weibo_id, $cache)) {            $key = array_search($weibo_id, $cache);            unset($cache[$key]);            return S('favorite_' . $uid, json_encode($cache));        } else {            return true;        }    }    /*     * 获取我收藏的微博     * $uid:用户id     * $since_id:微博起始id     * $max_id:微博最大id     * $count：每页数量     * $page:页数     */    public function getMyCollectWeibo($uid,$since_id,$max_id,$count,$page){    	$weibo=$this->getList($uid , $since_id , $max_id , $count , $page);        $drop_url = PIC_URL.'/data/uploads/' ;    	foreach($weibo as &$v)    	{                		//用户头像    		$v['user_face'] = getUserFace($v['uid'],'b') ;    		//用户性别：1为男2为女    		$v['user_sex'] =getUserSex($v['uid']);    		//用户学校            $userinfo = getUserInfo($v['uid'], '', '');    		$v['school'] = $userinfo['school'];    		$heart = M('weibo_heart')->where('weibo_id='.$v['weibo_id'])->count();    		//赞数量    		$v['heart'] = empty($heart)?0:$heart;    		$comments = M('weibo_comment')->where('weibo_id='.$v['weibo_id'])->count();    		//评论数量     		$v['comments']=empty($comments)?0:$comments;    		$v['time']=dateFormat($v['timestamp']);    		$v['content']=replaceSelfEmoji($v['content']);    		//$v['type_data']=unserialize($v['type_data']);    	    if(!empty($v['type_data'][0]))			{                unset($v['type_data']['picurl']) ;                unset($v['type_data']['thumbmiddleurl']) ;                unset($v['type_data']['thumburl']) ;				foreach ($v['type_data'] as $k=>$item)				{					$v['type_data'][$k]['picurl'] = telnetPictures(str_replace($drop_url, '',$item['picurl']));					$v['type_data'][$k]['thumbmiddleurl'] = telnetPictures(str_replace($drop_url, '',$item['picurl']));					$v['type_data'][$k]['thumburl'] = telnetPictures(str_replace($drop_url, '',$item['picurl']));				}			}			elseif($v['type_data'])			{					$pi['picurl'] = telnetPictures(str_replace($drop_url, '',$v['type_data']['picurl']));					$pi['thumbmiddleurl'] = telnetPictures(str_replace($drop_url, '',$v['type_data']['picurl']));					$pi['thumburl'] = telnetPictures(str_replace($drop_url, '',$v['type_data']['picurl']));					unset($v['type_data']) ;					$v['type_data'][] = $pi ;						}else				{				$v['type_data']=array();				}     		unset($v['ctime']);    		unset($v['from']);    		unset($v['transpond_id']);    		unset($v['transpond']);    		unset($v['from_data']);    		unset($v['isdel']);     		unset($v['favorited']);    		unset($v['ate_uid']);    		unset($v['face']);    		unset($v['transpond_data']);    		unset($v['timestamp']);    		unset($v['is_hearted']);    		unset($v['sid']);    		// unset($v['comment']);    		unset($v['type']);    		    	}    	return empty($weibo) ? array() : $weibo;    }}?>